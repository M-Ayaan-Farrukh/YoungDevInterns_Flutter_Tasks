
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context){
    return MaterialApp(
      debugShowCheckedModeBanner: false,  
      home: HomePage(),    
    );

  }
}
class HomePage extends StatefulWidget{
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  bool oTurn= true;
  List<String> displayXO = ['','','','','','','','',''];
  var myTextStyle = TextStyle(color: Colors.white, fontSize: 30 );
  int oscore=0;
  int xscore=0;
  @override 
  Widget build(BuildContext context){
    return Scaffold(
      backgroundColor: Colors.grey[800],
      body: Column(
        children: [
          Expanded(child: Container(
            child: Row(
            
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                
                Padding(
                  padding: const EdgeInsets.all(30),
                  child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                  
                    children: [
                      Text('Player O', style: myTextStyle),
                      Text(oscore.toString(), style: myTextStyle),
                    ],
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(30),
                  child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                  
                    children: [
                      Text('Player X', style: myTextStyle,),
                      Text(xscore.toString(), style: myTextStyle,),
                    ],
                  ),
                )
              ],
            ),


          ),
          ),
          Expanded(
            flex: 3,
            child: GridView.builder(
              itemCount: 9,
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3), itemBuilder: (BuildContext context, int index){
                return GestureDetector(
                  onTap: (){
                    _tapped(index);
            
                  },
                  child: Container(
                    decoration: BoxDecoration(
                      border: Border.all(color:Colors.grey[700]!)
                    ),
                    child: Center(
                      child: Text(displayXO[index], style: TextStyle(color: Colors.white, fontSize: 40),),
                    ),
                  
                  ),
                );
              }),
          ),Container(
          
          
          ),
        ],
        
      ),

    );
    }

    

  void _checkwinner(){
        

  if (displayXO[0] == displayXO[1] && displayXO[0] == displayXO[2] && displayXO[0] != '') {
    _showWinDialog(displayXO[0]);
  } else if (displayXO[3] == displayXO[4] && displayXO[3] == displayXO[5] && displayXO[3] != '') {
    _showWinDialog(displayXO[3]);
  } else if (displayXO[6] == displayXO[7] && displayXO[6] == displayXO[8] && displayXO[6] != '') {
    _showWinDialog(displayXO[6]);
  }

  // Column win conditions
  else if (displayXO[0] == displayXO[3] && displayXO[0] == displayXO[6] && displayXO[0] != '') {
    _showWinDialog(displayXO[0]);
  } else if (displayXO[1] == displayXO[4] && displayXO[1] == displayXO[7] && displayXO[1] != '') {
    _showWinDialog(displayXO[1]);
  } else if (displayXO[2] == displayXO[5] && displayXO[2] == displayXO[8] && displayXO[2] != '') {
    _showWinDialog(displayXO[2]);
  }

  // Diagonal win conditions
  else if (displayXO[0] == displayXO[4] && displayXO[0] == displayXO[8] && displayXO[0] != '') {
    _showWinDialog(displayXO[0]);
  } else if (displayXO[2] == displayXO[4] && displayXO[2] == displayXO[6] && displayXO[2] != '') {
    _showWinDialog(displayXO[2]);
  } else if(!displayXO.contains('')){
    _showDrawDialog();
  }
  }
void _tapped(int index) {
  setState(() {
    if (displayXO[index] == '') {
      if (oTurn) {
        displayXO[index] = 'o';
      } else {
        displayXO[index] = 'x';
      }
      oTurn = !oTurn;
    }
  });
      _checkwinner();

  
}
  

      
     void _showWinDialog(String winner){
      showDialog(
        barrierDismissible: false,
        context: context, 
      builder: (BuildContext context){
        return AlertDialog(
          title: Text('Winner is: '+ winner),
          actions: <Widget>[
            ElevatedButton(onPressed:(){
              _clearboard();
              Navigator.of(context).pop();

            },

             child: Text("Play Again"))
            
          ],
        );
      }
      );
      if (winner == 'o'){
        oscore +=1;

      }else if(winner == 'x'){
        xscore +=1;
       }
     }

     void _clearboard(){
      setState(() {
      displayXO = ['', '', '', '', '', '', '', '', ''];
      oTurn = true;
    });

     }

     void _showDrawDialog() {
  showDialog(
    barrierDismissible: false,
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text('It\'s a draw!'),
        actions: <Widget>[
          ElevatedButton(
            onPressed: () {
              _clearboard();
              Navigator.of(context).pop();
            },
            child: Text("Play Again"),
          ),
        ],
      );
    },
  );
}


    }
